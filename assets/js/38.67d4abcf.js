(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{546:function(a,t,s){"use strict";s.r(t);var i=s(15),o=Object(i.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"dfa-applications"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dfa-applications"}},[a._v("#")]),a._v(" DFA - Applications")]),a._v(" "),s("h2",{attrs:{id:"overview-of-data-flow-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview-of-data-flow-analysis"}},[a._v("#")]),a._v(" Overview of Data Flow Analysis")]),a._v(" "),s("p",[a._v("Data Flow Analysis怎么理解？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054148133.png",alt:"image-20220130054148133"}})]),a._v(" "),s("p",[a._v("从Introduction中我们可以知道：静态分析实际上就是抽象 Abstract 和 过近似Over-approximation 的结果。这种"),s("strong",[a._v("过近似")]),a._v("的静态分析方法实际上是大多数静态分析所采用的，我们称之为may analysis，与之相对还有一个must analysis。所谓的may analysis,指的是我们的结果可以是真实的，也可以存在一些非真实的结果；must analysis作为Under-approximation的结果，指的是所有的输出结果必须是正确的。不管是may analysis还是must analysis都是为了分析的安全（正确），于是就有safe-approximation。")]),a._v(" "),s("p",[a._v("在第一节课中，我们分析了一个表达式中的数据的符号，分为 "),s("code",[a._v("+ - 0 TOP BOTTOM")]),a._v(" ，这就是对数据的抽象，而对于这个栗子而言我们采用了Over-approximation过近似的方法得出了一个sound的结论。我们所得出的转换函数（[[Introduction#Transfer functions|Transfer function]]) 实际上根据语义和我们所分析的问题得到的分析方法。例如："),s("code",[a._v("TOP / 0 = BOTTOM")]),a._v("。而[[Introduction#Control Flows|Control Flow Handling]]的体现就是当我们遇到了两个分支合并，对于某一个符号的处理问题。")]),a._v(" "),s("p",[a._v("Safe-approximation：为了分析最终结果的正确。")]),a._v(" "),s("ul",[s("li",[a._v("may analysis: safe = over")]),a._v(" "),s("li",[a._v("must analysis: safe = under")])]),a._v(" "),s("p",[a._v("不同的数据流分析有不同的数据抽象，同时也有不同的safe-approximation。因此也就有了不同的转化函数和控制流处理。")]),a._v(" "),s("h2",{attrs:{id:"of-data-flow-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#of-data-flow-analysis"}},[a._v("#")]),a._v(" of Data Flow Analysis")]),a._v(" "),s("h3",{attrs:{id:"input-and-output-states"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#input-and-output-states"}},[a._v("#")]),a._v(" Input and Output States")]),a._v(" "),s("p",[a._v("使用"),s("code",[a._v("IN[s1]")]),a._v("来表示程序在执行S1语句之前的状态，使用"),s("code",[a._v("OUT[s1]")]),a._v("表示程序在执行完成S1之后的状态。也就是Input and output states。")]),a._v(" "),s("p",[a._v("程序的状态IN/OUT状态和语句前后的program point相关。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054246728.png",alt:"image-20220130054246728"}})]),a._v(" "),s("p",[a._v("在每一个数据流分析中，我们给每一个程序中的点关联一个数据流的值，这个值代表了程序状态的一个抽象。而值域的概念就是我们上面application的所有抽象的数据流值的集合。如下图的栗子所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054300809.png",alt:"image-20220130054300809"}})]),a._v(" "),s("p",[a._v("实际上数据流分析就是给程序当中的所有语句的IN和OUT去关联一个Data-flow Value的过程。这个过程通过解析一系列的Safe-approximation-directed Constraints(约束规则)，去寻找一个Solution ，而这些约束规则是基于Transfer Function和Control Flow的。也就是说我们不断的解转换函数和控制就信息的约束规则，最终会得到一个Solution ，这个Solution最终会为每一个语句的IN/OUT关联一个Data-flow Value。 ^f2f435")]),a._v(" "),s("h3",{attrs:{id:"notations-for-transfer-function-constraints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notations-for-transfer-function-constraints"}},[a._v("#")]),a._v(" Notations for Transfer Function Constraints")]),a._v(" "),s("p",[a._v("在一般情况下，正常的分析都是按照程序正常执行顺序进行执行的，也就是Froward Analysis。")]),a._v(" "),s("p",[a._v("Forward Analysis的数学定义为："),s("code",[a._v("OUT[s] = fs(IN[s])")])]),a._v(" "),s("p",[a._v("除此之外还有反向的分析方式，Backward Analysis。")]),a._v(" "),s("p",[a._v("Backward Analysis的数学定义为："),s("code",[a._v("IN[s] = fs(OUT[s])")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054314231.png",alt:"image-20220130054314231"}})]),a._v(" "),s("h3",{attrs:{id:"notations-for-control-flow-s-constraints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notations-for-control-flow-s-constraints"}},[a._v("#")]),a._v(" Notations for Control Flow's Constraints")]),a._v(" "),s("p",[a._v("上面是单个语句的约束规则，而对于BB的表示规则如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054329483.png",alt:"image-20220130054329483"}})]),a._v(" "),s("h2",{attrs:{id:"reaching-definitions-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reaching-definitions-analysis"}},[a._v("#")]),a._v(" Reaching Definitions Analysis")]),a._v(" "),s("p",[a._v("现阶段不涉及以下的问题：")]),a._v(" "),s("ul",[s("li",[a._v("方法调用\n"),s("ul",[s("li",[a._v("引入的位置：[[Inter-procedural Analysis]]")])])]),a._v(" "),s("li",[a._v("Aliases 两个标识符指向同一块地址。别名\n"),s("ul",[s("li",[a._v("引入位置：[[Pointer Analysis]]")])])])]),a._v(" "),s("blockquote",[s("p",[a._v('A definition d at program ponit p reaches a point q if there is a path from p to q such that d is not "killed" along that path.')])]),a._v(" "),s("p",[a._v("也就是说，从一个变量v的定义开始，到某个程序点p之间存在一个路径，并且在路径之中不存在对于v的重新定义，这样就是一个reaching definitions。到达定义可以用于分析变量在使用前是否被初始化了：给每一个变量在CFG的入口处进行初始化一个undefined，如果变量能够reach到变量利用的地方，那么说明存在变量未初始化的利用。")]),a._v(" "),s("h3",{attrs:{id:"abstraction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstraction"}},[a._v("#")]),a._v(" Abstraction")]),a._v(" "),s("p",[a._v("在这个分析中我们关注的数据是definition能否可达某一点，因此我们将所有的definition做抽象。用bit verctors表示。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054352798.png",alt:"image-20220130054352798"}})]),a._v(" "),s("p",[a._v("接下来从两方面进行分析：")]),a._v(" "),s("h3",{attrs:{id:"transfer-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transfer-function"}},[a._v("#")]),a._v(" Transfer Function")]),a._v(" "),s("p",[a._v("对于语句"),s("code",[a._v("D: v = x op y")]),a._v("而言在生成一个v的同时，之后的语句中使用的v都是当前生成的v，因此要删除掉对于v的其他定义，但是对于x，y等定义在后续的语句中仍然可用。数字化表示如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054438327.png",alt:"image-20220130054438327"}})]),a._v(" "),s("p",[a._v("举个栗子：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054451327.png",alt:"image-20220130054451327"}})]),a._v(" "),s("h3",{attrs:{id:"control-flow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#control-flow"}},[a._v("#")]),a._v(" Control FLow")]),a._v(" "),s("p",[a._v("对于Control Flow而言，由于是一个may analysis，所以不放过任意一条path。将所有的分支的结果的输出的并集都作为下一个BB的输入")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054505164.png",alt:"image-20220130054505164"}})]),a._v(" "),s("h3",{attrs:{id:"algorithm-of-reaching-definitions-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-of-reaching-definitions-analysis"}},[a._v("#")]),a._v(" Algorithm of Reaching Definitions Analysis")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054519403.png",alt:"image-20220130054519403"}})]),a._v(" "),s("p",[s("strong",[a._v("按照语义")]),a._v("理解，在分析程序之前，ENTRY的OUT必然为空。其他的所有BB在分析之前都为空。为什么要分开写？因为这个算法作为一个算法模板，对所有的Data-Flow Analysis应该都有效，有可能BB的OUT不为空的情况，因此ENTRY的OUT为空，其他的BB的OUT不为空。may analysis的BB OUT一般为空，must analysis的BB OUT一般为TOP。之后，如果存在某个BB的OUT变化了则循环每个BB，使用Control Flow analysis和Transfer Function进行约束。")]),a._v(" "),s("h3",{attrs:{id:"举了个栗子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举了个栗子"}},[a._v("#")]),a._v(" 举了个栗子")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054533876.png",alt:"image-20220130054533876"}})]),a._v(" "),s("p",[a._v("初始化：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054546685.png",alt:"image-20220130054546685"}})]),a._v(" "),s("p",[a._v("第一次迭代：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054559470.png",alt:"image-20220130054559470"}})]),a._v(" "),s("p",[a._v("由于迭代完成之后，存在大于等于一个的BB的OUT变化了，因此还需要继续迭代。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054612411.png",alt:"image-20220130054612411"}})]),a._v(" "),s("p",[a._v("实际上在迭代之中我们可以发现，如果输入是一样的，那么输出也一定是一样的。应为kill是永远固定的，generate也是固定的。如果in也相同则根据：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054624888.png",alt:"image-20220130054624888"}})]),a._v(" "),s("p",[a._v("输出也不会变。")]),a._v(" "),s("p",[a._v("最终经过三次的遍历结束，没有BB的OUT发生了变化，于是不要进行遍历了。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054642658.png",alt:"image-20220130054642658"}})]),a._v(" "),s("p",[a._v("最终得到的结果就是Final Analysis Result。于是根据上面的栗子，我们可以再次回顾之前的对于Data FLow Analysis的理解。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054653267.png",alt:"image-20220130054653267"}})]),a._v(" "),s("p",[a._v("理解一下，这个算法为什么会停？")]),a._v(" "),s("p",[a._v("这个算法最关键的是Transfer Function：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054706477.png",alt:"image-20220130054706477"}})]),a._v(" "),s("p",[a._v("那我们的循环条件是安全的吗？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054718502.png",alt:"image-20220130054718502"}})]),a._v(" "),s("p",[a._v("到达一个不动点：因为当所有的输出都不变化时，上一个输出是下一个输入，输入不会变意味着输出也不会变，所以无论循环多少遍都不会变。")]),a._v(" "),s("h2",{attrs:{id:"live-variables-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#live-variables-analysis"}},[a._v("#")]),a._v(" Live Variables Analysis")]),a._v(" "),s("blockquote",[s("p",[a._v("Live variables analysis tells whether the value of variable v at program point p could be used along some path in CFG starrting at p. If so, v is live at p; otherwise, v is dead at p.")])]),a._v(" "),s("p",[a._v("从p点开始到结束的一条路径中，是不是有个地方使用到了v。v想要live，那么v在从p到结束的时候不能被重新定义。我们就说v在p点是live的。一个典型的应用场景是寄存器的分配问题：寄存器如果满了，那么寄存器中存在的哪些值可以取出，替换为下一条语句的v的值。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054729843.png",alt:"image-20220130054729843"}})]),a._v(" "),s("h3",{attrs:{id:"abstraction-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstraction-2"}},[a._v("#")]),a._v(" Abstraction")]),a._v(" "),s("p",[a._v("我们关注的方法是所有的variables。0表示在p点是dead的，1是live的。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054745857.png",alt:"image-20220130054745857"}})]),a._v(" "),s("h3",{attrs:{id:"safe-approximation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#safe-approximation"}},[a._v("#")]),a._v(" Safe-approximation")]),a._v(" "),s("p",[a._v("首先确定一个问题，我们是使用backwards analysis还是使用forwards analysis。虽然没有固定的答案，但是显然backwards analysis更方便我们进行分析。从后往前分析时我们发现某个variable被use了，只需要向前寻找到其定义的p位置即可。而使用forwards analysis，我们从p开始，到use的位置，还需要返回到p的位置。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054759145.png",alt:"image-20220130054759145"}})]),a._v(" "),s("p",[a._v("这个和上一节的reaching Definition analysis类似，但是由于是backward analysis，因此在初始化的时候会有不同。并且，在一般情况下，may analysis一般初始化为空，must analysis一般初始化为all。后面也会总结。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054809089.png",alt:"image-20220130054809089"}})]),a._v(" "),s("h3",{attrs:{id:"举一个栗子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举一个栗子"}},[a._v("#")]),a._v(" 举一个栗子")]),a._v(" "),s("p",[a._v("初始化操作：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054823390.png",alt:"image-20220130054823390"}})]),a._v(" "),s("p",[a._v("第一次遍历：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054839991.png",alt:"image-20220130054839991"}})]),a._v(" "),s("p",[a._v("需要下一次遍历，因为IN[B]发生了change：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054853078.png",alt:"image-20220130054853078"}})]),a._v(" "),s("h2",{attrs:{id:"available-expressions-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-expressions-analysis"}},[a._v("#")]),a._v(" Available Expressions Analysis")]),a._v(" "),s("p",[a._v("这是一个must analysis。")]),a._v(" "),s("blockquote",[s("p",[a._v("An expression x op y is available at program point p if all paths from the entry to p must pass through the evaluation of x op y, and after the last evaluation of x op y, there is no redefinition of x or y.")])]),a._v(" "),s("p",[a._v("大概就是说，一个表达式"),s("code",[a._v("X OP Y")]),a._v(" 在p点是可用的，那么从入口到p点的所有的路径中必须都执行过"),s("code",[a._v("x op y")]),a._v("，并且在最后一次执行完"),s("code",[a._v("x op y")]),a._v("之后就没有对于x或者y的重新定义了。典型的利用场景就是对x op y 重复计算的结果的替换。")]),a._v(" "),s("h3",{attrs:{id:"abstraction-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstraction-3"}},[a._v("#")]),a._v(" Abstraction")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054905620.png",alt:"image-20220130054905620"}})]),a._v(" "),s("h3",{attrs:{id:"safe-approximation-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#safe-approximation-2"}},[a._v("#")]),a._v(" Safe-approximation")]),a._v(" "),s("p",[a._v("由于是must analysis，我们要考虑的是在实际的应用场景的safe，也就是说在这里，我们想象成对于表达式结果的替换的场景中，如果说我们误报了，将一个本来是不能被替换的表达式的值替换掉了，那么对于程序来说就是不safe的了。那么如果是进行under-approximation的话，我们也许会漏报一个本来可以进行替换的值，但这不会导致程序不safe，仅仅只是在程序优化的时候没有达到最好的效果而已。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054916397.png",alt:"image-20220130054916397"}})]),a._v(" "),s("h3",{attrs:{id:"algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[a._v("#")]),a._v(" Algorithm")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054929345.png",alt:"image-20220130054929345"}})]),a._v(" "),s("h3",{attrs:{id:"举了个栗子-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举了个栗子-2"}},[a._v("#")]),a._v(" 举了个栗子")]),a._v(" "),s("p",[a._v("初始化：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054938985.png",alt:"image-20220130054938985"}})]),a._v(" "),s("p",[a._v("第一次迭代：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130054951364.png",alt:"image-20220130054951364"}})]),a._v(" "),s("p",[a._v("所有的OUT都发生了变化，所以需要再一次的迭代：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220130055005840.png",alt:"image-20220130055005840"}})]),a._v(" "),s("h2",{attrs:{id:"总结三种不同的data-flow-analysis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结三种不同的data-flow-analysis"}},[a._v("#")]),a._v(" 总结三种不同的Data-Flow Analysis")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th"),a._v(" "),s("th",[a._v("Reaching Definitions")]),a._v(" "),s("th",[a._v("Live Variables")]),a._v(" "),s("th",[a._v("Avaliable Expression")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("Domain")]),a._v(" "),s("td",[a._v("Definition")]),a._v(" "),s("td",[a._v("Variables")]),a._v(" "),s("td",[a._v("Expression")])]),a._v(" "),s("tr",[s("td",[a._v("Direction")]),a._v(" "),s("td",[a._v("Forwards")]),a._v(" "),s("td",[a._v("Backwards")]),a._v(" "),s("td",[a._v("Forwards")])]),a._v(" "),s("tr",[s("td",[a._v("May/Must")]),a._v(" "),s("td",[a._v("May")]),a._v(" "),s("td",[a._v("May")]),a._v(" "),s("td",[a._v("Must")])]),a._v(" "),s("tr",[s("td",[a._v("Boundary")]),a._v(" "),s("td",[a._v("OUT entry = null")]),a._v(" "),s("td",[a._v("IN exit = null")]),a._v(" "),s("td",[a._v("OUT entry = null")])]),a._v(" "),s("tr",[s("td",[a._v("Initialization")]),a._v(" "),s("td",[a._v("OUT B = null")]),a._v(" "),s("td",[a._v("IN B = null")]),a._v(" "),s("td",[a._v("OUT B = all")])]),a._v(" "),s("tr",[s("td",[a._v("Transfer function")]),a._v(" "),s("td",[a._v("OUT = gen U (IN - kill)")]),a._v(" "),s("td"),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("Meet")]),a._v(" "),s("td",[a._v("union")]),a._v(" "),s("td",[a._v("union")]),a._v(" "),s("td",[a._v("and")])])])])])}),[],!1,null,null,null);t.default=o.exports}}]);