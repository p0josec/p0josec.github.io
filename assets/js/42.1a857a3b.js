(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{550:function(e,s,a){"use strict";a.r(s);var n=a(15),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"codeql从入门到放弃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codeql从入门到放弃"}},[e._v("#")]),e._v(" CodeQL从入门到放弃")]),e._v(" "),a("blockquote",[a("p",[e._v("这篇文章是我在学习CodeQL时的笔记，该文章完全参考了l4yn3师傅在FreeBuf上发表《CodeQL从入门到放弃》。文章的链接会放到参考资料中。至于为什么要重新写一篇类似的文章，只是单纯为了记录一下自己学习CodeQL使用的过程遇到的问题。")])]),e._v(" "),a("h2",{attrs:{id:"为什么是codeql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是codeql"}},[e._v("#")]),e._v(" 为什么是CodeQL")]),e._v(" "),a("p",[e._v("CodeQL作为代码安全审计的一款十分好用和高效的工具，并不是凭空出现的。还要从代码审计的历史说起。")]),e._v(" "),a("p",[e._v("在最早期的时候，由于系统规模较小，代码量还比极少，代码之间的逻辑调用关系也很清晰，安全人员通常采用人工的方式去寻找代码中存在的安全问题。而人工审计一般有三种常见的审计思路：第一种是全文通读，在全面的阅读代码之后，对代码有一个全面的理解，知道每一部分代码的功能，然后结合具体的功能发现代码中存在的问题，这种审计的方式十分的细致，但是也十分的耗时；第二种方式是定位危险的函数，然后向上追溯到危险数据输入的位置，如果数据流没有中断则存在一条从用户输入到危险函数的通路，这种方式虽然快捷，但是不全面，对应一些逻辑漏洞无能为力；第三种方式是针对一些特定的功能点进行威胁的建模和审计，这种方式相对较快且对于逻辑漏洞也能有很好的把握。")]),e._v(" "),a("p",[e._v("但是随着项目复杂度和代码量上的指数级增长，人工的方式很难进行全面的审计，因此就需要一些软件的介入，配合人工完成代码审计。这一阶段的一些工具例如rips、Cobra可以帮助定位到危险函数，然后再由人工确认是否存在漏洞。这种方式也是需要依靠人工进行判定，安全人员的压力还是比较大，因此也就迭代出了一些自动化的代码审计产品，例如常用的Checkmarx、Fortify SCA等。CodeQL也是属于这一类型的工具，相较于其他几种工具而言，CodeQL开源、可自定义程度高的优点十分值得安全人员学习和使用。")]),e._v(" "),a("h2",{attrs:{id:"环境介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境介绍"}},[e._v("#")]),e._v(" 环境介绍")]),e._v(" "),a("p",[e._v("这里使用的是l4yn3师傅搭建的靶场，该靶场是使用SpringBoot搭建的，里面包含了一些常见漏洞类型。这一篇就利用CodeQL去自动检索这些漏洞，并减少误报和漏报问题。我的环境配置如下：")]),e._v(" "),a("ul",[a("li",[e._v("操作系统：Mac OS")]),e._v(" "),a("li",[e._v("Java版本：1.8.0_311")]),e._v(" "),a("li",[e._v("maven版本：3.8.4")]),e._v(" "),a("li",[e._v("靶场下载地址：https://github.com/l4yn3/micro_service_seclab/")])]),e._v(" "),a("h2",{attrs:{id:"codeql创建并导入数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codeql创建并导入数据库"}},[e._v("#")]),e._v(" CodeQL创建并导入数据库")]),e._v(" "),a("p",[e._v("对于CodeQL的环境搭建包括VSCode、CodeQL CLI的相关配置在之前的文章中有详细写过，这里就不再赘述。")]),e._v(" "),a("p",[e._v("在配置完成环境并且将靶场代码克隆到本地之后，我们使用CodeQL CLI的相关命令生成一个数据库：")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("codeql database create ./seclab_db --language"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("java --command"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"mvn clean install --file pom.xml"')]),e._v(" --source-root"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("./micro_service_seclab\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --language 指定语言")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# --command="mvn clean install --file pom.xml" 编译命令Java语言使用maven进行编译')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --source-root=  项目路径")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("最终出现Successfully created database代表数据库创建完成了，在创建过程中如果发生报错，可以删除数据库再次运行。注意要保持全路径中没有空格存在。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220405074746592.png",alt:"image-20220405074746592"}})]),e._v(" "),a("p",[e._v("在创建完成数据库之后，可以将数据库导入到VSCode中。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220405075353853.png",alt:"image-20220405075353853"}})]),e._v(" "),a("p",[e._v("运行hello world测试环境是否正常。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('select "helloworld"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220405075505400.png",alt:"image-20220405075505400"}})]),e._v(" "),a("p",[e._v("至此，环境已经搭建好了，数据库也已经导入了。后面就开始编写相应的查询语句。")]),e._v(" "),a("h2",{attrs:{id:"codeql-基础语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#codeql-基础语法"}},[e._v("#")]),e._v(" CodeQL 基础语法")]),e._v(" "),a("h3",{attrs:{id:"基础ql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础ql"}},[e._v("#")]),e._v(" 基础QL")]),e._v(" "),a("p",[e._v("我们利用CodeQL的命令创建了CodeQL数据库，然后需要使用CodeQL提供的开源的规则库编写相关的规则，发现安全漏洞。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/1628394186_610f52ca969589d7b9214.png",alt:"img"}})]),e._v(" "),a("p",[e._v("CodeQL是一种类SQL的查询语句，主要由四部分组成：")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import java # 导入语句 导入相关的库\n\nfrom ... # 定义相关的变量\nwhere # 设置查询的条件\nselect # 显示查询的结果\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("在from语句中，我们通常使用CodeQL提供给我们的很多类库来声明变量。我们经常使用的类库有如下的几个：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[e._v("名称")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("解释")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("Method")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("方法类，Method method表示获取当前项目中所有的方法")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("MethodAccess")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("方法调用类，MethodAccess call表示获取当前项目当中的所有方法调用")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("Parameter")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("参数类，Parameter表示获取当前项目当中所有的参数")])])])]),e._v(" "),a("p",[e._v("比如我们可以使用查询语句找出所有名为"),a("code",[e._v("get*")]),e._v("的方法。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import java\n\nfrom Method method\nwhere method.getName().regexpMatch("get.*")\nselect method.getName(),method.getDeclaringType()\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("我们可以将where后面的查询条件封装成一个函数，函数的参数为method对象，函数中判断该method是否符合条件，返回True或者false。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import java\n\npredicate isGetMethod(Method method) {\n    exists( | method.getName().regexpMatch("get.*"))\n}\n\nfrom Method method\n\nwhere isGetMethod(method)\nselect method.getName(),method.getDeclaringType()\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"设置source和sink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置source和sink"}},[e._v("#")]),e._v(" 设置source和sink")]),e._v(" "),a("p",[e._v("sources、sinks、sanitizer是污点分析中的核心三元组。sources指的是漏洞污染的输入点；sinks指的是漏洞的执行位置；sanitizer称为净化函数，阻断了从sources到sinks的通路。只有当sources和sinks同时存在，并且不存在一个sanitizer阻断sources到sinks的通路则漏洞是存在的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/1628394339_610f53637de77e9114e4f.jpg",alt:"img"}})]),e._v(" "),a("p",[e._v("在web项目中，source是用户的输入。如果使用的是spring框架搭建的项目，source可以是"),a("code",[e._v("RequestMapping")]),e._v("。我们不需要自己去编写source的规则，CodeQL官方提供了Source，其中包含了大部分的Source入口，常见的Spring框架的入口也在里面。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("override predicate isSource(DataFlow::Node src) {\n    src instanceof RemoteFlowSource\n}\t\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("在这个靶场中，使用的JDBCTemplates，因此在使用query方法进行查询时，传入sql语句，就是本例中的sinks。sinks的设置使用到了exists子查询语法，exists的语法是："),a("code",[e._v("exists(声明变量|判断表达式)")]),e._v("。因此我们的sink设置如下：")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('override predicate isSink(DataFlow::Node sink) {\n    exists(Method method,MethodAccess call | \n        method.hasName("query")\n        and call.getMethod() = method\n        and sink.asExpr() = call.getArgument(0)\n        )\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("h3",{attrs:{id:"判断连通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断连通"}},[e._v("#")]),e._v(" 判断连通")]),e._v(" "),a("p",[e._v("我们设置了source和sink，后面比较关键的一步就是判断从source到sink是否连通。因为如果漏洞存在，则必须要从source到sink存在一条通路。好在这项工作由CodeQL完成，CodeQL使用"),a("code",[e._v("hasFlowPath")]),e._v("判断是否连通，参数只需要传入我们设置好的source和sink。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('from VulConfig config , DataFlow::PathNode source , DataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\nselect source.getNode(),source,sink,"source"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"小结版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结版本"}},[e._v("#")]),e._v(" 小结版本")]),e._v(" "),a("p",[e._v("到目前为止，我们设置了source、sink，并且使用CodeQL的"),a("code",[e._v("hasFlowPath")]),e._v("判断连通，下一步需要将这些东西组装起来。我们在前面有提到过CodeQL class的概念，我们这里也只需要继承CodeQL提供的用于数据流分析的父类"),a("code",[e._v("TaintTracking::Configuration")]),e._v("即可。最终我们第一版本的代码如下：")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\n\nclass VulConfig extends TaintTracking::Configuration {\n    VulConfig(){\n        this = "sqlInjectionConfig"\n    }\n\n    override predicate isSource(DataFlow::Node src) {\n        src instanceof RemoteFlowSource\n    }\n\n    override predicate isSink(DataFlow::Node sink) {\n        exists(Method method,MethodAccess call | \n            method.hasName("query")\n            and call.getMethod() = method\n            and sink.asExpr() = call.getArgument(0)\n            )\n    }\n\n}\n\nfrom VulConfig config , DataFlow::PathNode source , DataFlow::PathNode sink\n\nwhere config.hasFlowPath(source, sink)\nselect source.getNode(),source,sink,"source"\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br")])]),a("p",[e._v("另外需要注意，注释部分十分的重要，包含了查询的源信息，和最终结果的展示也有很大的关系，因此必须要带上。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/**\n * @id java/examples/vuldemo\n * @name Sql-Injection\n * @description Sql-Injection\n * @kind path-problem\n * @problem.severity warning\n */\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220405202830038.png",alt:"image-20220405202830038"}})]),e._v(" "),a("h2",{attrs:{id:"误报处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#误报处理"}},[e._v("#")]),e._v(" 误报处理")]),e._v(" "),a("p",[e._v("上一步中得出的一些结果中，有一个结果是不可能产生SQL注入问题的，属于误报。当参数类long类型时，恶意SQL语句无法进行拼接和传参，因此不存在SQL注入的可能，我们需要将其从结果中排除。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220405203437413.png",alt:"image-20220405203437413"}})]),e._v(" "),a("p",[e._v("我们排出误报的方法就是使用sanitizer")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/1628394471_610f53e70361d448d1bbe.jpg",alt:"img"}})]),e._v(" "),a("p",[e._v("CodeQL提供了一个"),a("code",[e._v("isSanitizer")]),e._v("方法，该方法和"),a("code",[e._v("isSource")]),e._v("、"),a("code",[e._v("isSink")]),e._v("一样，都是"),a("code",[e._v("TaintTracking::Configuration")]),e._v("提供的净化方法。CodeQL在该方法中提供了默认的基础数据类型的过滤，但是对于List这种复合的数据类型需要我们加入到"),a("code",[e._v("isSanitizer")]),e._v("中。")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("override predicate isSanitizer(DataFlow::Node node){\n    node.getType() instanceof PrimitiveType or\n    node.getType() instanceof BoxedType or\n    node.getType() instanceof NumberType or\n    exists(ParameterizedType pt | node.getType() = pt \n        and pt.getTypeArgument(0) instanceof NumberType )\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("以上代码的意思为：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。重新执行query，误报就已经解决了。")]),e._v(" "),a("h2",{attrs:{id:"漏报解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#漏报解决"}},[e._v("#")]),e._v(" 漏报解决")]),e._v(" "),a("p",[e._v("根据ly4n3师傅的文章，存在一个漏报，因为Optional这种类型的使用没有在CodeQL的语法库里，所以"),a("code",[e._v("username.get()")]),e._v("无法识别就断掉了。但是我在测试的时候发现，似乎CodeQL能够识别这条通路了，可能CodeQL更新了吧。这里就简单提一下如果出现了漏报怎么解决。")]),e._v(" "),a("p",[e._v("CodeQL提供了一个"),a("code",[e._v("isAdditionalTaintStep")]),e._v("方法，该方法可以将断掉的数据通路接上。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/1628394505_610f5409ded2fb0984439.jpg",alt:"img"}})]),e._v(" "),a("p",[a("code",[e._v("isAdditionalTaintStep")]),e._v("方法是CodeQL的类"),a("code",[e._v("TaintTracking::Configuration")]),e._v("提供的的方法。它的作用是将一个可控节点，A强制传递给另外一个节点B，那么节点B也就成了可控节点。")]),e._v(" "),a("p",[e._v("l4yn3给的代码：")]),e._v(" "),a("div",{staticClass:"language-ql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/**\n * @id java/examples/vuldemo\n * @name Sql-Injection\n * @description Sql-Injection\n * @kind path-problem\n * @problem.severity warning\n */\n\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\n\npredicate isTaintedString(Expr expSrc, Expr expDest) {\n    exists(Method method, MethodAccess call, MethodAccess call1 | expSrc = call1.getArgument(0) and expDest=call and call.getMethod() = method and method.hasName("get") and method.getDeclaringType().toString() = "Optional<String>" and call1.getArgument(0).getType().toString() = "Optional<String>"  )\n}\n\nclass VulConfig extends TaintTracking::Configuration {\n  VulConfig() { this = "SqlInjectionConfig" }\n\n  override predicate isSource(DataFlow::Node src) { src instanceof RemoteFlowSource }\n\n  override predicate isSanitizer(DataFlow::Node node) {\n    node.getType() instanceof PrimitiveType or\n    node.getType() instanceof BoxedType or\n    node.getType() instanceof NumberType or\n    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )\n  }\n\n  override predicate isSink(DataFlow::Node sink) {\n    exists(Method method, MethodAccess call |\n      method.hasName("query")\n      and\n      call.getMethod() = method and\n      sink.asExpr() = call.getArgument(0)\n    )\n  }\noverride predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) {\n    isTaintedString(node1.asExpr(), node2.asExpr())\n  }\n}\n\n\nfrom VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, "source"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br")])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),a("p",[e._v("l4yn3 Freebuf：https://www.freebuf.com/articles/web/283795.html")]),e._v(" "),a("p",[e._v("CodeQL 文档：https://codeql.github.com/docs/")])])}),[],!1,null,null,null);s.default=t.exports}}]);