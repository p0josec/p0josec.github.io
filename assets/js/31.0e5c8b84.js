(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{540:function(s,t,a){"use strict";a.r(t);var n=a(15),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"【数据结构】概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【数据结构】概述"}},[s._v("#")]),s._v(" 【数据结构】概述")]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("笔记")]),s._v(" "),a("p",[s._v("基础不牢固，打打基础吧。")])]),s._v(" "),a("h2",{attrs:{id:"术语和概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#术语和概念"}},[s._v("#")]),s._v(" 术语和概念")]),s._v(" "),a("h3",{attrs:{id:"数据、数据元素、数据项、数据对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据、数据元素、数据项、数据对象"}},[s._v("#")]),s._v(" 数据、数据元素、数据项、数据对象")]),s._v(" "),a("ul",[a("li",[s._v("数据：客观事物的符号表示，所有能够输入到计算机中并可以被计算机程序处理的符号的总称。比如：字符串、图像、声音等。")]),s._v(" "),a("li",[s._v("数据元素：数据的基本单位。数据元素也称为元素、记录。可以理解为数据库的一条记录。")]),s._v(" "),a("li",[s._v("数据项：组成数据元素的、有独立含义的、不可分割的最小单位。可以理解为数据库的某一列。")]),s._v(" "),a("li",[s._v("数据对象：性质相同的数据元素的集合。是数据的子集。可以理解为数据库的一张表。")])]),s._v(" "),a("h3",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),a("blockquote",[a("p",[s._v("数据结构是相互之间存在的一种或者多种特定关系的数据元素的集合。")]),s._v(" "),a("p",[s._v("数据结构是带结构的数据元素的集合，结构是数据之间的关系。")])]),s._v(" "),a("h4",{attrs:{id:"_1-逻辑结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-逻辑结构"}},[s._v("#")]),s._v(" 1. 逻辑结构")]),s._v(" "),a("p",[s._v("数据的逻辑结构是从 "),a("strong",[s._v("逻辑关系")]),s._v("上描述数据，和数据的存储无关。可以看作是从具体问题中抽象出来的数学模型。逻辑结构的两个要素："),a("strong",[s._v("数据元素、关系")]),s._v("。通常存在以下四种数据的逻辑结构：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("集合结构")]),s._v(" "),a("p",[s._v("数据元素之间除了属于同一个集合之外，无其他关系。例如：学生属于一个班级。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504232141566.png",alt:"image-20220504232141566"}})])]),s._v(" "),a("li",[a("p",[s._v("线性结构")]),s._v(" "),a("p",[s._v("数据之间存在一对一的关系。例如：排队和糖葫芦。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504232217255.png",alt:"image-20220504232217255"}})])]),s._v(" "),a("li",[a("p",[s._v("树结构")]),s._v(" "),a("p",[s._v("数据中存在一对多的关系。例如：族谱、组织结构等。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504232248690.png",alt:"image-20220504232248690"}})])]),s._v(" "),a("li",[a("p",[s._v("图结构")]),s._v(" "),a("p",[s._v("数据之间存在多对多的关系。如：人物关系图。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504232319249.png",alt:"image-20220504232319249"}})])])]),s._v(" "),a("blockquote",[a("p",[s._v("集合、树、图都属于非线性结构。")]),s._v(" "),a("p",[s._v("线性结构包含：线性表、栈、队列、字符串、数据、广义表等。")]),s._v(" "),a("p",[s._v("非线性结构包含：树、二叉树、有向图和无向图。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504232510568.png",alt:"image-20220504232510568"}})]),s._v(" "),a("h4",{attrs:{id:"_2-存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-存储结构"}},[s._v("#")]),s._v(" 2. 存储结构")]),s._v(" "),a("blockquote",[a("p",[s._v("数据对象如何存储在计算机中，称为数据的存储结构。也叫 "),a("strong",[s._v("物理结构")]),s._v("。在数据存储到计算机时，既要存储元素也要存储关系。数据元素在计算机中有两种基本的存储结构："),a("strong",[s._v("顺序存储结构和链式存储结构")]),s._v("。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("顺序存储结构")]),s._v(" "),a("p",[s._v("顺序存储结构借助数据在存储器中的相对位置来表示逻辑关系。")])]),s._v(" "),a("li",[a("p",[s._v("链式存储结构")]),s._v(" "),a("p",[s._v("顺序存储结构要求所有的存储空间连续。链式存储结构无需占用完整存储空间。数据节点之间通过指针字段表示数据关系。")])])]),s._v(" "),a("h3",{attrs:{id:"数据类型和抽象数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型和抽象数据类型"}},[s._v("#")]),s._v(" 数据类型和抽象数据类型")]),s._v(" "),a("blockquote",[a("p",[s._v("数据类型（DT）：高级程序设计怨言的一个基本概念。")]),s._v(" "),a("p",[s._v("抽象数据类型（ADT）：抽象出实际问题的本质。包含三部分：数据对象、数据对象上关系的集合、数据对象的基本操作集合。")])]),s._v(" "),a("p",[s._v("定义格式如下：")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ADT 抽象数据类型名{\n\t数据对象：\n\t数据关系：\n\t基本操作：基本操作名（参数列表）\n\t\t\t\t\t\t初始条件：\n\t\t\t\t\t\t操作结果：\n}ADT 抽象数据类型名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"抽象数据类型的表示与实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型的表示与实现"}},[s._v("#")]),s._v(" 抽象数据类型的表示与实现")]),s._v(" "),a("p",[s._v("使用介于伪代码和C语言之间的类C语言作为后续的描述工具。具体语法不在赘述。")]),s._v(" "),a("p",[s._v("以下是以复数为例，给出的一个完整的抽象数据类型的定义、表示和实现。")]),s._v(" "),a("p",[s._v("定义：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504233930666.png",alt:"image-20220504233930666"}})]),s._v(" "),a("p",[s._v("表示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504233947009.png",alt:"image-20220504233947009"}})]),s._v(" "),a("p",[s._v("实现：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wiki-1251603812.cos.ap-shanghai.myqcloud.com/images/image-20220504233958652.png",alt:"image-20220504233958652"}})]),s._v(" "),a("h2",{attrs:{id:"算法和算法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法和算法分析"}},[s._v("#")]),s._v(" 算法和算法分析")]),s._v(" "),a("h3",{attrs:{id:"算法的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法的定义"}},[s._v("#")]),s._v(" 算法的定义")]),s._v(" "),a("blockquote",[a("p",[s._v("算法是为了解决某类问题而规定的有限长度的操作序列。")])]),s._v(" "),a("p",[s._v("算法必须满足如下的五个特性：")]),s._v(" "),a("ul",[a("li",[s._v("有穷性：算法必须在执行有穷步数后结束")]),s._v(" "),a("li",[s._v("确定性：对于每种情况下的操作，不会产生二义性")]),s._v(" "),a("li",[s._v("可行性：算法中的所有操作都可以通过已经实现的操作运算的有限次操作完成")]),s._v(" "),a("li",[s._v("输入：一个算法有0个或多个输入")]),s._v(" "),a("li",[s._v("输出：一个算法有一个或多个输出")])]),s._v(" "),a("h3",{attrs:{id:"算法的评价标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法的评价标准"}},[s._v("#")]),s._v(" 算法的评价标准")]),s._v(" "),a("blockquote",[a("p",[s._v("算法分析并非精确统计算法的实际执行时间，而是针对算法的执行次数进行估计。")])]),s._v(" "),a("p",[s._v("算法的评价包含以下的几个维度：")]),s._v(" "),a("ul",[a("li",[s._v("正确性：在合理的数据输入下，总能得到正确的结果")]),s._v(" "),a("li",[s._v("可读性：便于理解")]),s._v(" "),a("li",[s._v("健壮性：输入非法数据，可以有效的处理")]),s._v(" "),a("li",[s._v("高效性：包含时间和空间两个维度")])]),s._v(" "),a("h3",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),a("blockquote",[a("p",[s._v("衡量算法效率的两种方式：事后统计法和事前分析法。事后统计法需要实现算法并执行，计算时间和空间的开销。这种方法存在两个弊端：必须实现、硬件依赖。")])]),s._v(" "),a("h4",{attrs:{id:"问题规模和语句频度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题规模和语句频度"}},[s._v("#")]),s._v(" 问题规模和语句频度")]),s._v(" "),a("p",[s._v("问题规模是算法求解问题输入量的多少，通常用 "),a("code",[s._v("n")]),s._v("表示。")]),s._v(" "),a("p",[s._v("语句频度是一条语句重复执行的次数。")]),s._v(" "),a("h4",{attrs:{id:"时间复杂度的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度的定义"}},[s._v("#")]),s._v(" 时间复杂度的定义")]),s._v(" "),a("p",[s._v("一般情况下，算法中的基本语句重复执行的次数是问题规模n的某个函数"),a("code",[s._v("f(n)")]),s._v("，算法的时间量可以表示为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("T(n) = O(f(n))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("随着问题规模n的逐渐增大，算法的执行时间的增长率和"),a("code",[s._v("f(n)")]),s._v("的增长率相同，称为算法的"),a("code",[s._v("渐进时间复杂度")]),s._v("，简称为"),a("code",[s._v("时间复杂度")]),s._v("。")]),s._v(" "),a("p",[s._v("关于数学符号"),a("code",[s._v("O")]),s._v("的严格定义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("若T(n)和f(n)是定义在正整数集合上的两个函数，则T(n)和O(f(n))表示存在正的常数C和n0，使得当n>= n0时，都满足0<=T(n)<=Cf(n).\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("没必要纠结这个严格的定义方式，只需要如何进行计算即可。以下是常见的时间复杂度：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量复杂度 O(1)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线性阶复杂度O(n)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 平方阶O(n2)")]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ni"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对数阶O(log2n)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("常见的时间复杂度按照数量级递增排列为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("O(1) < O(log2n) < O(n) < O(nlog2n) < O(n^2) < O(n^3) < …… < O(n^k) < O(2^n)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"最好最坏时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最好最坏时间复杂度"}},[s._v("#")]),s._v(" 最好最坏时间复杂度")]),s._v(" "),a("p",[s._v("算法在最好情况下的时间复杂度称为最好"),a("strong",[s._v("时间复杂度")]),s._v("，指的是算法计算量可能达到的最小值；算法在最坏情况下的时间复杂度称为 "),a("strong",[s._v("最坏时间复杂度")]),s._v("，指的是算法计算量达到的最大值。算法的 "),a("strong",[s._v("平均时间复杂度")]),s._v("指的是算法在所有情况下的计算量的加权平均。")]),s._v(" "),a("h4",{attrs:{id:"算法空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法空间复杂度"}},[s._v("#")]),s._v(" 算法空间复杂度")]),s._v(" "),a("p",[s._v("一般情况下，一个程序在机器上执行，除了需要寄存本身的指令、常数、变量、输入数据意外，还需要一些队数据进行操作的辅助空间。如果算法执行时所需要的辅助空间对于输入量而言是常数，称为 "),a("strong",[s._v("原地工作")]),s._v("，辅助空间为 "),a("code",[s._v("O(1)")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"斐波那契数列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数列"}},[s._v("#")]),s._v(" 斐波那契数列")]),s._v(" "),a("p",[a("strong",[s._v("斐波那契数")]),s._v(" （通常用 "),a("code",[s._v("F(n)")]),s._v(" 表示）形成的序列称为 "),a("strong",[s._v("斐波那契数列")]),s._v(" 。该数列由 "),a("code",[s._v("0")]),s._v(" 和 "),a("code",[s._v("1")]),s._v(" 开始，后面的每一项数字都是前面两项数字的和。也就是：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("F(0) = 0，F(1) = 1\nF(n) = F(n - 1) + F(n - 2)，其中 n > 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("该题有两种算法，递归和迭代。")]),s._v(" "),a("p",[s._v("递归算法，时间复杂度为"),a("code",[s._v("O(n^2)")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("迭代算法，时间复杂度为"),a("code",[s._v("O(n)")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" second "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    second "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);